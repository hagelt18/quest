{"version":3,"sources":["data/store.js","common/save-data.js","assets/svg/logo.svg","components/header.jsx","components/hint.jsx","components/footer.jsx","App.jsx","serviceWorker.js","index.js"],"names":["initialState","store","createContext","Provider","StateProvider","children","useReducer","state","action","type","hint","payload","Error","dispatch","value","saveName","name","data","loadData","saveData","defaultData","progress","localStorage","setItem","JSON","stringify","parse","getItem","module","exports","className","src","Logo","alt","useState","showHint","setShowHint","useContext","useEffect","handleClose","onClick","hintWarningConfirmed","window","confirm","Modal","style","color","fontWeight","show","onHide","Header","closeButton","Title","Body","Footer","Button","variant","Container","to","Home","React","lazy","Test","Help","CluePage","App","Suspense","fallback","basename","path","exact","render","props","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0c92ad71.chunk.js","sourcesContent":["// store.js\r\nimport React, { createContext, useReducer } from 'react';\r\n\r\nconst initialState = {};\r\nconst store = createContext(initialState);\r\nconst { Provider } = store;\r\n\r\nconst StateProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer((state, action) => {\r\n    switch (action.type) {\r\n      case 'SET_HINT':\r\n        const newState = { ...state, hint: action.payload }\r\n        return newState;\r\n      default:\r\n        throw new Error();\r\n    };\r\n  }, initialState);\r\n\r\n  return <Provider value={{ state, dispatch }}>{children}</Provider>;\r\n};\r\n\r\nexport { store, StateProvider }","export const saveProgress = (id) => {\r\n  const data = loadData();\r\n  data.currentClue = id;\r\n  saveData(data);\r\n}\r\n\r\nexport const saveName = (name) => {\r\n  const data = loadData();\r\n  data.name = name;\r\n  saveData(data);\r\n}\r\n\r\nconst defaultData = {\r\n  name: null,\r\n  progress: []\r\n}\r\n\r\nexport const saveData = (data) => {\r\n  localStorage.setItem('clue-data', JSON.stringify(data));\r\n}\r\n\r\nexport const loadData = () => {\r\n  const data = JSON.parse(localStorage.getItem('clue-data') || '{}');\r\n  return data || { ...defaultData };\r\n}\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.6184e0f0.svg\";","import React from 'react';\r\n// import { ReactComponent as Logo } from '../assets/svg/logo.svg';\r\nimport Logo from '../assets/svg/logo.svg';\r\nimport './header.css';\r\n// const chestGif = require('../assets/images/chest3d.gif');\r\n\r\nexport default () => {\r\n    return (\r\n\r\n        <div className=\"Header\">\r\n            <img className=\"Logo\" src={Logo} alt=\"Logo\" />\r\n        </div>\r\n    )\r\n}","import React, { useState, useContext } from 'react';\r\nimport { loadData, saveData } from '../common/save-data';\r\nimport { useEffect } from 'react';\r\nimport { store } from '../data/store';\r\nimport { Modal, Button } from 'react-bootstrap';\r\n\r\nexport default () => {\r\n\r\n  const [showHint, setShowHint] = useState(null);\r\n  const { state } = useContext(store);\r\n  let data = loadData();;\r\n\r\n  useEffect(() => {\r\n  }, [])\r\n\r\n  const showHintButtonClicked = () => {\r\n    let show = true;\r\n    if (!data.hintWarningConfirmed) {\r\n      // Warn user\r\n      const confirmed = window.confirm(\"You are about to recieve your first hint, are you sure?\");\r\n      if (!confirmed) {\r\n        show = false;\r\n      } else {\r\n        data.hintWarningConfirmed = true;\r\n        saveData(data);\r\n      }\r\n    }\r\n\r\n    // window.alert(state.hint);\r\n    setShowHint(true);\r\n  }\r\n\r\n  if (!state.hint) {\r\n    return null;\r\n  }\r\n\r\n\r\n  const handleClose = () => setShowHint(false);\r\n\r\n  const renderModal = () => {\r\n    return (\r\n      <Modal style={{ color: 'black', fontWeight: 700 }} show={showHint} onHide={handleClose}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>HINT!</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>{state.hint}</Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"primary\" onClick={handleClose}>\r\n            Close\r\n          </Button>\r\n          {/* <Button variant=\"primary\" onClick={handleClose}>\r\n            Save Changes\r\n          </Button> */}\r\n        </Modal.Footer>\r\n      </Modal>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {!showHint &&\r\n        // <button className=\"hint\" onClick={showHintButtonClicked}>?</button>\r\n        <button onClick={showHintButtonClicked}>üëÅ‚Äçüó®</button>\r\n      }\r\n      {renderModal()}\r\n      {/* {showHint && <p>HINT: {hint}</p>} */}\r\n    </>\r\n  )\r\n}","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Hint from './hint';\r\nimport { Container, Navbar, Grid, Row, Col, Footer } from 'react-bootstrap';\r\n\r\nexport default () => {\r\n\r\n    const renderContent = () => {\r\n        return (\r\n            <Container>\r\n                <Link to={`/help`}><button>‚òé</button></Link>\r\n                <Hint />\r\n            </Container>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <footer className='footer mt-auto py-3 bg-dark text-white'>\r\n            {renderContent()}\r\n        </footer>\r\n    )\r\n}","import React from 'react';\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\n//import Home from './areas/home';\n//import Test from './areas/test';\nimport Header from './components/header';\nimport Footer from './components/footer';\nimport { Container } from 'react-bootstrap';\nimport { StateProvider } from './data/store.js';\n\nconst Home = React.lazy(() => import('./areas/home'));\nconst Test = React.lazy(() => import('./areas/test'));\nconst Help = React.lazy(() => import('./areas/help/help'));\nconst CluePage = React.lazy(() => import('./areas/clue-page'));\n\nfunction App() {\n  return (\n    <React.Suspense fallback={<span>Loading...</span>}>\n      <HashRouter basename='/'>\n        <StateProvider>\n          <div className=\"App\">\n            <Header />\n            <Container className=\"App-Content mb-2\">\n              <Switch>\n                {/* <Route path={`/`} exact ><Home /></Route>\n            <Route path={`/test`} exact ><Test /></Route> */}\n                <Route path={`/`} exact render={() => <Home />} />\n                <Route path={`/clue/:id`} exact render={(props) => <CluePage {...props} />} />\n                <Route path={`/test`} exact render={() => <Test />} />\n                <Route path={`/help`} exact render={() => <Help />} />\n              </Switch>\n            </Container>\n            <Footer />\n          </div>\n        </StateProvider>\n      </HashRouter>\n    </React.Suspense>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}